<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_select</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_init();
global.zoom = 1;

server_url = "ws://"+dom_name+":"+string(port); //connect to each room server
if(ws_status(global.socket) != ws_status_connected){
    global.socket = ws_connect(server_url);
}

entry_flag = 0;

player_select = 0;
select_status = -1;
chosen_chara = 0;

msg = -1;
login = -1;

members = "";

if(global.player_name == undefined || global.player_name == ""){
    msg = get_string_async("名前を入力してください（10文字以内）", "");
    select_status = -1;

} else{
    msg = -1;
    select_status = 0;
}
    
user = ds_map_create();

user[? "numa"] = ds_map_create();
ds_map_add(user[? "numa"],"password","test5670");
ds_map_add(user[? "numa"],"base_spr_image",spr_numa_stand);
ds_map_add(user[? "numa"],"chara_name","numa");





chara[0] = spr_obakechan_stand;
chara[1] = spr_sakyuusa_stand;
chara[2] = spr_homura_stand;
chara[3] = spr_peace_stand;
chara[4] = spr_riena_stand;
chara[5] = spr_kaku_stand;
chara[6] = spr_rukusaris_stand;
chara[7] = spr_aojiso_stand;
chara[8] = spr_rudi_stand;
chara[9] = spr_togenezumi_stand;
chara[10] = spr_mix_stand;
chara[11] = spr_frey_stand;
chara[12] = spr_garuga_stand;
chara[13] = spr_aru_stand;
chara_counts = array_length_1d(chara);

for(var i = 0; i&lt;chara_counts; i++){
    chara_name[i] = string_replace(sprite_get_name(chara[i]),"spr_","");
    chara_name[i] = string_replace(chara_name[i],"_stand","");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blank</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wss</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listen for ping responses




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//entry name
if(ds_map_find_value(async_load, "id") == msg){
    if(ds_map_find_value(async_load, "status")){
       if(ds_map_find_value(async_load, "result") != ""){
        global.player_name =  string_copy(ds_map_find_value(async_load, "result"),0,10);
        select_status = 0;
       } else{
        msg = get_string_async("名前を入力してください（10文字以内）", "");
       }
    } else{
        msg = get_string_async("名前を入力してください（10文字以内）", "");
    }
}

//login function (add character list)
if(ds_map_find_value(async_load, "id") == login){
    var u = ds_map_find_value(async_load, "username");
    var p = ds_map_find_value(async_load, "password");
    if(ds_map_find_value(user[? u],"password") == p &amp;&amp; ds_map_find_value(user[? u],"password") != 0){
        show_message(ds_map_find_value(user[? u],"chara_name")+" added");
        chara[chara_counts] = ds_map_find_value(user[? u],"base_spr_image");
        chara_name[chara_counts] = ds_map_find_value(user[? u],"chara_name");
        chara_counts += 1;
    } else{
        if(ds_map_exists(user,u)){
            show_message("Wrong password");
        } else{
            show_message("Wrong password or invalid username");
        }
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
// リクエストしたときのIDと比較
if ds_map_find_value(async_load, "id") == get[0]
{
  // ステータスのチェック
  if ds_map_find_value(async_load, "status") &gt;= 0
  {
    // レスポンスデータの取得
    r_str = ds_map_find_value(async_load, "result");
    //show_message(r_str);
    r_map = json_decode(r_str);
    global.lang = r_map[? "country"];
    //show_message(r_map[? "ip"]);
  }
  else
  {
    r_str = "null";
  }
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 
//move cursor
if(keyboard_check_pressed(vk_up) &amp;&amp; player_select &gt; 0){
    player_select -= 1;
}
if(keyboard_check_pressed(vk_down) &amp;&amp; player_select &lt; (chara_counts - 1) ){
    player_select += 1;
}

//draw titles
var title_str = "オリチャ（タイトル仮称）";
global.zoom = 2;
title_x = floor(room_width/2) - floor((string_width(title_str)*global.zoom)/2);
title_y = 40;
draw_text_outline(title_str,title_x,title_y);
global.zoom = 1;

title_str = "- Beta 0.0.2 -";
title_x = floor(room_width/2) - floor((string_width(title_str)*global.zoom)/2);
title_y = 90;
draw_text_outline(title_str,title_x,title_y);


title_str = "まだまだ開発段階です";
title_x = floor(room_width/2) - floor((string_width(title_str)*global.zoom)/2);
title_y = 110;
draw_text_outline(title_str,title_x,title_y);


//Only update when connected
if (ws_status(global.socket) == ws_status_connected) {
  if(ws_has_message(global.socket)){
      
      ping = json_decode(ws_get_message(global.socket));
      if(ping[? "status"] == "connected"){
          global.player_id = ping[? "player_id"];
          if(ds_map_exists(ping,"members")){
            members = ping[? "members"];
          }
      }    
  }
}
draw_text_outline(members,30,300);

/*
if(select_status == -1){
title = subcaption;
title_x = floor(room_width/2) - floor((string_width(title)*global.zoom)/2);
title_y = room_height-50;
text_color = c_yellow;
draw_text_outline(title,title_x,title_y);
text_color = c_white;
}

if(select_status == -1){
    if(alarm[0] == -1){
        alarm[0] = 30;
    }
    if(alarm[0] &gt; 15){
        start_text_y = 130;
    }
    if(alarm[0] &lt;= 15){
        start_text_y = 134;
    }
    
    
    start_text = "press any keys";
    start_text_x = floor(room_width/2) - floor(string_width(start_text)/2);
    draw_text_outline(start_text,start_text_x,start_text_y);
    if(keyboard_check_pressed(vk_anykey)){
        select_status += 1;
        keyboard_clear(vk_enter);
    }
    
}
*/

//選択後のキャラ表示
if(select_status == 1){
    image_speed = 0.2;
    draw_sprite_ext(chosen_chara,-1,floor(room_width/2),floor(room_height/2)+50,-2,2,0,c_white,1);
    var mes = "Enter : OK || Backspace : Cancel";
    draw_text_outline(mes,floor(room_width/2) - floor((string_width(mes)*global.zoom)/2),room_height-50);
    if(keyboard_check_pressed(vk_backspace)){
        select_status -= 1;
        player_select = 0;
        chosen_chara = 0;
        keyboard_clear(vk_backspace);
    }
    if(keyboard_check_pressed(vk_enter)){
        global.player_chara = chosen_chara;
        room_goto_next();
    }
    
} else if(select_status == 0){
    //player box
    player_box_width = 100;
    player_box_height = 170;
    player_box_y = 150;
    player_img_y = 250;


    player_box_x = floor(room_width/2) - 150 - player_box_width;
    player_img_x = floor(room_width/2);
     
    //draw player box
    draw_line_width_colour(player_box_x+(player_box_width/2),player_box_y,player_box_x+(player_box_width/2),player_box_y+player_box_height,player_box_width+50,c_black,c_black);
    
    //draw text on the player box
    var i = 0;
    var list_text_position = player_box_y;
    repeat(chara_counts)
    {   
        if(player_select == i){
            list_text[i] = "&gt; "+ chara_name[i];
            image_speed = 0.2;
            draw_sprite_ext(chara[i],-1,player_img_x,player_img_y,-1,1,0,c_white,1);
            if(keyboard_check_pressed(vk_enter)){
                global.player_chara = chara[i];
                room_goto_next();
            }
        } else{
            list_text[i] = chara_name[i];
        }
        if(i == 0){
            list_pos[i] = player_box_y;
        }
        if(i &gt; 0){
            list_pos[i] = list_pos[i-1] + string_height(chara_name[i-1])+5    
        }
        i += 1;
    }
    

    while(list_pos[player_select] &gt; ( player_box_y + player_box_height - 5 ))
    {
        var i = 0;
        repeat(chara_counts)
        {
            list_pos[i] -= string_height(chara_name[i])+5;
            i += 1;
        }
    }

    
    var i = 0;
    var top_flag = 0;
    var bottom_flag = 0;
    repeat(chara_counts)
    {
        if(list_pos[i] &gt;= player_box_y &amp;&amp; list_pos[i]  &lt; ( player_box_y + player_box_height - 5 ) ){
            draw_text_outline(list_text[i],player_box_x,list_pos[i]);
        }
        if(list_pos[i] &lt; player_box_y &amp;&amp; top_flag == 0){
            draw_text_outline('^^^',player_box_x,player_box_y - 20);
            top_flag = 1;
        }
        if(list_pos[i]  &gt;= ( player_box_y + player_box_height - 5) &amp;&amp; bottom_flag == 0){
            draw_text_outline('vvv',player_box_x,player_box_y + player_box_height + 20);
            bottom_flag = 1;
        }    
        i += 1;
    }
    var txt = "Recommended browser:";
    text_color = c_yellow;
    draw_text_outline(txt,floor(room_width/2)-floor(string_width(txt)/2),room_height-45);
    var txt = "Google Chrome";
    draw_text_outline(txt,floor(room_width/2)-floor(string_width(txt)/2),room_height-30);
    text_color = c_white;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(select_status == 0){
    login = get_login_async("","");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
