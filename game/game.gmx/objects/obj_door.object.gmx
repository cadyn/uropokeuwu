<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>7000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ins_mark = instance_create(x,y-140,obj_mark);
rm_name = "";
rm_title = ""
scr_init();
enter_flag = 0;
sprite_index = 0;
door_img = 0;
rm_data = ds_map_create();
member_num = -1;
loaded_flag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_CC.ping != -1){
    if(obj_CC.ping[? "name"] == obj_CC.dbname+rm_name){
        if(obj_CC.ping[? "type"] == "redis_smembers"){
            var member_list = obj_CC.ping[? "val"];
            member_num = ds_list_size(member_list);
            for(var i = 0; i &lt; member_num; i++){
                var member_id = member_list[| i];
                ws_redis_get(global.socket,"hgetall",member_id);
            }
            obj_CC.ping = -1;
        }
    }
    if(obj_CC.ping[? "type"] == "redis_hgetall"){
        var member_id = obj_CC.ping[? "key"];
        var member_data = obj_CC.ping[? "val"];
        if( member_data[? "room_name"] == rm_name){
            rm_data[? member_id] = member_data;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(rm_name){
    case "ren_room" :
        if(global.player_chara_name == "siro" &amp;&amp; global.connect_flag == 0){
            enter_flag = 1; door_img = 1;
        } else{
            enter_flag = 0; door_img = 0;
        }
    break;
    default :
        enter_flag = 1;
    break;
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if ds_map_find_value(async_load, "id") == http
    {
    if ds_map_find_value(async_load, "status") == 0
       {
       r_str = ds_map_find_value(async_load, "result");
       show_message(r_str);
       }
    else
       {
       r_str = rm_name+":null";
       show_message(r_str);
       }
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,door_img,x,y);
if(global.ins_player &gt; -1 &amp;&amp; enter_flag == 1){
    if(collision_circle(x,y-30,30,global.ins_player,false,true) != noone){
        ins_mark.sprite_index = spr_trimark;
        var rm = asset_get_index(rm_name);
        draw_text_outline(rm_title,x-floor(string_width(display_name)/2),ins_mark.y-40);
        
        if(global.connect_flag == 1){
            if(member_num == -1){
                var send_data = ds_map_create();
                if(ws_status(global.socket) == ws_status_connected){
                    ws_redis_sdata(global.socket,"smembers",obj_CC.dbname+rm_name,"");
                }
            }        

            if(ds_map_size(rm_data)&gt;0){
                var member_id = ds_map_find_first(rm_data);
                for(var i = 0; i &lt; ds_map_size(rm_data); i++){
                    var chara_data = rm_data[? member_id];
                    var chara_name = chara_data[? "chara_name"];
                    var spr_img = ds_list_find_value(global.chara_img[? chara_name+"_stand"],0);
                    var user_name = chara_data[? "user_name"];
                    var spr_width = floor(sprite_get_width(spr_img)/sprite_get_number(spr_img));
                    
                    switch(i){
                        case 0: spr_img_x[0] = x + spr_width+10; spr_img_y[0] = ins_mark.y+40; break;
                        case 1: spr_img_x[1] = x - spr_width-10; spr_img_y[1] = ins_mark.y+40; break;
                        case 2: spr_img_x[2] = x + spr_width+10; spr_img_y[2] = spr_img_y[0] - sprite_get_height(spr_img) - 20; break;
                        case 3: spr_img_x[3] = x - spr_width-10; spr_img_y[3] = spr_img_y[1] - sprite_get_height(spr_img) - 20; break;
                    }
                    image_speed = 0.2;
                    draw_sprite_ext(spr_img,-1,spr_img_x[i],spr_img_y[i],1,1,1,c_white,0.5);
                    draw_text_outline(user_name,spr_img_x[i]-floor(string_width(user_name)/2),spr_img_y[i]);
                    member_id = ds_map_find_next(rm_data,member_id);
                }
            }
            
            var memo = member_num+" users";
            if(member_num == 4) memo += " [FULL]";
            draw_text_outline(memo,x-floor(string_width(memo)/2),ins_mark.y-60);

            if(member_num &gt; -1 &amp;&amp; member_num &lt; 4){      
                if( keyboard_check_pressed(vk_enter)){
                    obj_CC.close_flag = 2;
                    room_goto(asset_get_index(rm_name));
                }   
            }   

            
        } else{
        //OFFLINE MODE
            if(keyboard_check_pressed(vk_enter)){
                if(rm_name == "ren_room"){
                    if(show_question("コンテンツ内容による年齢制限#あなたは１８歳以上ですか？")){
                        room_goto(asset_get_index(rm_name));
                    }
                } else{
                    obj_CC.close_flag = 2;
                    room_goto(test_room);
                }
            }
        }

        
    } else{
        ins_mark.sprite_index = -1;
        ds_map_clear(rm_data);
        member_num = -1;
        loaded_flag = 0;
    }
} else{
    ins_mark.sprite_index = -1;
    ds_map_clear(rm_data);
    member_num = -1;
    loaded_flag = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
