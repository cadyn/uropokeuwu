<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//status
image_speed = 0.2;

msg = -1;
opponent = -1;

spr_base = "";

chatmes = "";

rand_flag = 0;

fat_rate = 0;

calorie = 0;


chara_data = ds_map_create();

//ins_gauge = instance_create(x,bbox_top,obj_gauge);
//ins_bind_gauge = instance_create(x,bbox_bottom+20,obj_bind_gauge);
ins_voice = instance_create(x,y,obj_voice);
ins_name = instance_create(x,bbox_top-30, obj_chara_name);
ins_mark = instance_create(ins_name.x,ins_name.y,obj_mark);
ins_chkmark = instance_create(ins_name.x,ins_name.y-20,obj_chkmark);

ins_opts = ds_list_create();
ds_list_add(ins_opts,ins_voice,ins_mark,ins_name,ins_chkmark);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyconfig
scr_keyconfig();
if(ds_map_exists(global.chara_img, global.player_chara_name+"_bows")){
    global.key_config[? "down"] = "bows";
}
if(ds_map_exists(global.chara_img, global.player_chara_name+"_appeal")){
    global.key_config[? "down"] = "appeal";
}
if(ds_map_exists(global.chara_img, global.player_chara_name+"_eat")){
    global.key_config[? "down"] = "eat";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bind image change
if(chara_data[? "status"] == "atk"){
    chara_data[? "status"] = "stand";
}
if(chara_data[? "status"] == "atk_bind"){
    scr_mark(spr_mark_disapp);
    scr_chara_reset();
}

if(chara_data[? "status"] == "atk_wait"){
    chara_data[? "status"] = "atk_bind";
    keyboard_key = -1;
    alarm[1] = 50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for animation change</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic functions
if(x &lt; 16){
    x = 16;
    
} else if(x &gt;= (room_width-16)){
    x = room_width-16;
}

if(y &lt; 16){
    y = 200;
    vspeed = 0;
} else if(y &gt;= (room_height-16)){
    y = room_height-16;
    vspeed = 0;
}


if(visible == true){
    solid = true;
    ins_name.visible = true;
}

//on ground
if(tile_layer_find(1000000,x,bbox_bottom+vspeed)){
    gravity = 0;
    vspeed = 0;
    hspeed = 0;
    rand_flag = 1;
    solid = true;
    
} else{
    rand_flag = 0;
    if(bbox_top == bbox_bottom){
        gravity = 0.3;
    } else{
        gravity = 1;   
    }
}

if(image_alpha &lt; 1){
    solid = false;
    depth = -99999;
}

if(sprite_index &gt; -1){
    mask_index = sprite_index;
}
//Fly function
if(chara_data[? "status"] == "fly"){
    if(ds_map_exists(global.chara_img,chara_data[? "chara_name"]+"_fly")){
        gravity = 0.3;
        hspeed = image_xscale*real(move_x);
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fat control
if(calorie &gt;= 100){
    if(fat_rate &gt; 0){
        fat_rate -= 1;
    }
    calorie = 0;
}
    
if(fat_rate &gt; 0){
    if(image_xscale &gt; 0) image_xscale = 1 + (0.05*fat_rate);
    if(image_xscale &lt; 0) image_xscale = -1 - (0.05*fat_rate);
}
if(fat_rate == 0 &amp;&amp; calorie == 0){    
    if(string_letters(chara_data[? "condition"]) == "fat"){
        var fat_level = real(string_digits(chara_data[? "condition"]));
        if(fat_level == 1){
            chara_data[? "condition"] = "";
        }
        if(image_xscale &gt; 0) image_xscale = 1;
        if(image_xscale &lt; 0) image_xscale = -1;
        image_speed += 0.05;
        calorie = 0;
        fat_rate = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key setting
global.key_config[? "B_col"] = c_gray;

var st = chara_data[? "status"];
if(chara_data[? "player_id"] == global.player_id){
    switch(string_letters(st)){
        case "atkwait":
            global.key_config[? "left_col"] = c_gray; global.key_config[? "right_col"] = c_gray; global.key_config[? "up_col"] = c_gray; global.key_config[? "down_col"] = c_gray;
        break;
        case "atkbind":
            global.key_config[? "left_col"] = c_gray; global.key_config[? "right_col"] = c_gray; global.key_config[? "up_col"] = c_gray; global.key_config[? "down_col"] = c_gray;
        break;
        case "bind":
            global.key_config[? "up"] = "speed up";
            global.key_config[? "down"] = "speed down";
            global.key_config[? "left"] = "prev scene";
            global.key_config[? "right"] = "next scene";
            global.key_config[? "backspace"] = "Quit binding";
            if(cur_level == ds_list_size(global.chara_img[? img_key])-1){
                global.key_config[? "left_col"] = c_gray;
                global.key_config[? "right_col"] = c_gray;
            }
        break;
        case "binded":
            global.key_config[? "up_col"] = c_gray; global.key_config[? "down_col"] = c_gray; global.key_config[? "left_col"] = c_gray; global.key_config[? "right_col"] = c_gray;
        break;

        default:

        
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction with selectroom doors
var door = collision_circle(x,y,floor(sprite_get_height(sprite_index)/4),obj_door,false,true);
if(door != noone){
    if(chara_data[? "player_id"] == global.player_id){
        if(door.member_num &gt; -1 &amp;&amp; door.member_num &lt; 4){   
            global.key_config[? "enter"] = "Enter";
            global.key_config[? "enter_col"] = c_white;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options position
ins_name.myname = chara_data[? "user_name"];
ins_name.x = x-floor(string_width(ins_name.myname)/2);
ins_name.y = y-sprite_get_height(sprite_index)-20;

ins_chkmark.x = x;
ins_chkmark.y = ins_name.y-20;

ins_mark.image_xscale = -image_xscale*2;
ins_mark.x = ins_name.x - 10;
if(image_xscale &lt; 0){
    ins_mark.x = ins_name.x + string_width(ins_name.myname) + 10;
}
ins_mark.y = ins_name.y+20;

if(visible == true){
ins_voice.x = ins_mark.x;
ins_voice.y = ins_mark.y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chat function
if(chara_data[? "chat_status"] == "chatting"){
    if(chara_data[? "chatmes"] != ""){
        ds_list_add(obj_CC.system_mes,chara_data[? "user_name"]+": "+chara_data[? "chatmes"]);
        scr_voice(chara_data[? "chatmes"]);
    }
    ins_mark.sprite_index = -1;
    chara_data[? "chat_status"] = "chat_end";
    if(chara_data[? "player_id"] == global.player_id) keyboard_key = -1;
}
if(chara_data[? "chat_status"] == "chat_end"){
    ins_mark.sprite_index = -1;
    chara_data[? "chat_status"] = "";
}        
if(chara_data[? "chat_status"] == "chat_start"){
    ins_mark.sprite_index = spr_mark_input;
    chara_data[? "chat_status"] = "";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Expression function
if(chara_data[? "express"] != -1){
    express = chara_data[? "express"];
    scr_mark(express);
    chara_data[? "express"] = -1;
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bind check
if(room != selectroom){
    global.key_config[? "B_col"] = c_gray;
    var opp = collision_circle(x,y,64,obj_chara,false,true);
    var st = chara_data[? "status"];
    if(opp != noone ){
        var opp_st = opp.chara_data[? "status"];

        if(string_letters(st) == "bind" || string_letters(st) == "binded"){
            ins_chkmark.visible = false;
            exit;
        }
        if(ds_map_exists(global.bind_list,global.player_chara_name+"_"+opp.chara_data[? "chara_name"])){
            global.key_config[? "B_col"] = c_white;
            if(string_letters(opp_st) != "binded"){
                opp.ins_chkmark.visible = true;
            }
            
            if( keyboard_check_pressed(ord('B'))){
                
                var chara_name = chara_data[? "chara_name"];
                var opp_name = opp.chara_data[? "chara_name"];
                if(ds_map_exists(global.bind_list,chara_name+"_"+opp_name)){
        
                    //default
                    var bind_data = global.bind_list[? chara_name+"_"+opp_name];
                    var bind_st = ds_list_find_value(bind_data,irandom_range(0,ds_list_size(bind_data)-1));
                    chara_data[? "status"] = bind_st;
                    
                    image_speed = 0.1;
                    image_index = 0;            
                    chara_data[? "img_level"] = "0"; //first set index
                    chara_data[? "opp_name"] = opp.chara_data[? "chara_name"];
                    chara_data[? "opponent"] = opp.chara_data[? "player_id"];
                    chara_data[? "image_speed"] = image_speed;
                    
                    opp.chara_data[? "img_level"] = "0"; //first set index
                    opp.chara_data[? "opp_name"] = chara_data[? "chara_name"];
                    opp.chara_data[? "opponent"] = chara_data[? "player_id"];
                    opp.chara_data[? "status"] = "binded";
                    opp.chara_data[? "image_speed"] = image_speed;
                    opp.chara_data[? "image_xscale"] = -image_xscale;
                    opp.image_xscale = -image_xscale;
                    opp.solid = false;
                    opp.chara_data[? "x"] = x;
                    opp.x = x;
        
                    with(opp){
                        visible = false;
                        chara_data[? "visible"] = 0;
                        ins_name.visible = false;
                        scr_charadata_broadcast();
                    }
                    scr_charadata_update();
                }
            }
            
        }
//if(opp != noone){
    } else{
        ins_chkmark.visible = false;
    }
    
} else{
        ins_chkmark.visible = false;
}

if( chara_data[? "opponent"] != "" ){
    if(chara_data[? "status"] == "binded"){
        gravity = 0;
        vspeed = 0;
        if(visible == true){
            
        }
    }
    if(chara_data[? "opponent"] != ""){
        var opp = chara_data[? "opponent"];
        if(!ds_map_exists(obj_CC.member,opp)){
            scr_chara_reset();
        }
    }
}


/*
if(chara_data[? "status"] == "atk_bind"){
    x += (real(chara_data[? "move_x"])+ 3) * image_xscale; 
    solid = false;
        
    if(image_xscale &gt; 0) var x_opp = bbox_right + 20;
    if(image_xscale &lt; 0) var x_opp = bbox_left - 20;

    var opp = collision_rectangle( x,y, x_opp, y-sprite_get_height(sprite_index),obj_chara, false, true );
    if(opp != noone &amp;&amp; string_copy(opp.chara_data[? "status"],1,4) != "bind" ){
        var chara_name = chara_data[? "chara_name"];
        var opp_name = opp.chara_data[? "chara_name"];
        if(ds_map_exists(global.bind_list,chara_name+"_"+opp_name)){

            //default
            var bind_data = global.bind_list[? chara_name+"_"+opp_name];
            var bind_st = ds_list_find_value(bind_data,irandom_range(0,ds_list_size(bind_data)-1));
            chara_data[? "status"] = bind_st;
            
            image_speed = 0.1;
            image_index = 0;            
            chara_data[? "img_level"] = "0"; //first set index
            chara_data[? "opp_name"] = opp.chara_data[? "chara_name"];
            chara_data[? "opponent"] = opp.chara_data[? "player_id"];
            chara_data[? "image_speed"] = image_speed;
            
            opp.chara_data[? "img_level"] = "0"; //first set index
            opp.chara_data[? "opp_name"] = chara_data[? "chara_name"];
            opp.chara_data[? "opponent"] = chara_data[? "player_id"];
            opp.chara_data[? "status"] = "binded";
            opp.chara_data[? "image_speed"] = image_speed;
            opp.chara_data[? "image_xscale"] = -image_xscale;
            opp.image_xscale = -image_xscale;
            opp.solid = false;
            opp.chara_data[? "x"] = x;
            opp.x = x;

            with(opp){
                visible = false;
                chara_data[? "visible"] = 0;
                ins_name.visible = false;
                scr_charadata_broadcast();
            }
            scr_charadata_update();
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///[obsoleted]Bind check
/*
if(chara_data[? "status"] == "atk_bind"){
    x += (real(chara_data[? "move_x"])+ 3) * image_xscale; 
    solid = false;
        
    if(image_xscale &gt; 0) var x_opp = bbox_right + 20;
    if(image_xscale &lt; 0) var x_opp = bbox_left - 20;

    var opp = collision_rectangle( x,y, x_opp, y-sprite_get_height(sprite_index),obj_chara, false, true );
    if(opp != noone &amp;&amp; string_copy(opp.chara_data[? "status"],1,4) != "bind" ){
        var chara_name = chara_data[? "chara_name"];
        var opp_name = opp.chara_data[? "chara_name"];
        if(ds_map_exists(global.bind_list,chara_name+"_"+opp_name)){

            //default
            var bind_data = global.bind_list[? chara_name+"_"+opp_name];
            var bind_st = ds_list_find_value(bind_data,irandom_range(0,ds_list_size(bind_data)-1));
            chara_data[? "status"] = bind_st;
            
            image_speed = 0.1;
            image_index = 0;            
            chara_data[? "img_level"] = "0"; //first set index
            chara_data[? "opp_name"] = opp.chara_data[? "chara_name"];
            chara_data[? "opponent"] = opp.chara_data[? "player_id"];
            chara_data[? "image_speed"] = image_speed;
            
            opp.chara_data[? "img_level"] = "0"; //first set index
            opp.chara_data[? "opp_name"] = chara_data[? "chara_name"];
            opp.chara_data[? "opponent"] = chara_data[? "player_id"];
            opp.chara_data[? "status"] = "binded";
            opp.chara_data[? "image_speed"] = image_speed;
            opp.chara_data[? "image_xscale"] = -image_xscale;
            opp.image_xscale = -image_xscale;
            opp.solid = false;
            opp.chara_data[? "x"] = x;
            opp.x = x;

            with(opp){
                visible = false;
                chara_data[? "visible"] = 0;
                ins_name.visible = false;
                scr_charadata_broadcast();
            }
            scr_charadata_update();
        }
    }
}


if( chara_data[? "opponent"] != "" ){
    if(chara_data[? "status"] == "binded"){
        gravity = 0;
        vspeed = 0;
        if(visible == true){
            
        }
    }
    if(chara_data[? "opponent"] != ""){
        var opp = chara_data[? "opponent"];
        if(!ds_map_exists(obj_CC.member,opp)){
            scr_chara_reset();
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_numa_zzz_selectroom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rand_flag = 1;

if(id == global.ins_player){
    with(obj_numa_zzz_selectroom){
        var msg = choose("むにゃ。。。","ぐう。。。","僕は、寝てる#だけだよ・・","すやすや・・")
        scr_voice(msg);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bed_back">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rand_flag = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_chara">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blank</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = 0;
rand_flag = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(sprite_index &gt; -1 &amp;&amp; visible == true){
///Bind action
    if(chara_data[? "status"] == "atk_wait"){
        image_index = floor(image_number) - 1;
    }
    
    
    
//Appeal
    if(chara_data[? "status"] == "appeal"){
        chara_data[? "status"] = "stand";
    }
    
//Appeal
    if(chara_data[? "status"] == "change"){
        chara_data[? "status"] = "stand";
        chara_data[? "condition"] = "dragon";
        image_index = 0;
    }
    
//Eat
    scr_chara_fat_control_animationEnd();

}


//If it has repeat flag
if(ds_list_size(global.img_info[? sprite_index]) &gt; 1){
    if(ds_list_find_value(global.img_info[? sprite_index],1) == 0){
        image_index = image_number - 1;
    }

    if(alarm[0] == -1){
        if(ds_list_size(global.img_info[? sprite_index]) &gt; 2){
            alarm[0] = ds_list_find_value(global.img_info[? sprite_index],2);

        } else{
            alarm[0] = 10;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update chara status

//update coordinates
chara_data[? "x"] = floor(x);
chara_data[? "y"] = floor(y);
chara_data[? "image_xscale"] = image_xscale;
chara_data[? "image_speed"] = image_speed;


//set sprite image 
if(chara_data[? "chara_name"] != "" &amp;&amp; visible == true){

        var pre_spr = sprite_index;
        
        scr_obj_chara_drawEnd_1_chkst();
            
        //Set image to sprite or read change data
        if(ds_list_find_value(global.chara_img[? img_key],cur_level) != undefined &amp;&amp; img_key != ""){
            var img_data = ds_list_find_value(global.chara_img[? img_key],cur_level);
            
            if(is_string(img_data)){
            //set change data
                if(cur_level &lt; ds_list_size(global.chara_img[? img_key]-1)){
                    cur_level += 1;
                    chara_data[? "img_level"] = cur_level;
                }
                
                var data_type = string_copy(img_data,1,string_pos(":",img_data)-1);
                if(data_type == "charadata"){
                    var tgt = self;
                }
                if(data_type == "oppdata"){
                    var opp = chara_data[? "opponent"];
                    var tgt = obj_CC.member[? opp];
                }
                img_data = string_replace(img_data,data_type+":","");
                tmp_list = ds_list_create();
                ds_list_read(tmp_list,img_data);
                for(var i = 0; i &lt; ds_list_size(tmp_list); i++){
                    var tmp = tmp_list[| i];
                    var data_index = string_copy(tmp,1,string_pos(":",tmp)-1);
                    var data_val = string_copy(tmp,string_pos(":",tmp)+1,string_length(tmp));
                    if(data_index == "reset"){
                        with(tgt){
                            visible = 1;
                            image_speed = 0.2;
                            solid = true;
                            chara_data[? "hp"] = 100;
                            chara_data[? "status"] = "stand";
                            chara_data[? "visible"] = 1;
                            chara_data[? "movement"] = -1;
                            chara_data[? "opponent"] = "";
                            chara_data[? "opp_name"] = "";
                            chara_data[? "img_level"] = 0;
                            scr_charadata_update();
                        }
                    } else{
                        if(data_index == "image_speed") tgt.image_speed = real(data_val);
                        if(chara_data[? "player_id"] == global.player_id &amp;&amp; data_index == "chara_name"){
                            global.player_chara_name = data_val;
                        }
                        tgt.chara_data[? data_index] = data_val;
                    }
                }
                ds_list_destroy(tmp_list);
                
                scr_obj_chara_drawEnd_1_chkst();
            }
            
            
            if(string_letters(st) == "bind"){
                var opp_id = chara_data[? "opponent"];
                var opp = obj_CC.member[? opp_id];
            }
            
    
            if(cur_level &lt; ds_list_size(global.chara_img[? img_key])-1 ){ 
            //go to next level after waiting
                if(alarm[0] == 0){
                    cur_level += 1;
                    chara_data[? "img_level"] = cur_level;
                }
                
            } else if(cur_level == ds_list_size(global.chara_img[? img_key])-1){     
            //When no more animations over current level
                if(floor(image_index) == image_number - 1){
                    if(string_letters(st) == "bind"){
                        var opp_id = chara_data[? "opponent"];
                        var opp = obj_CC.member[? opp_id];
                        
                        if(ds_list_find_value(global.img_info[? sprite_index],1) == 1){
                            if(!ds_map_exists(global.chara_img,opp_name+"_"+opp.chara_data[? "status"]+"_"+chara_name)){
                                image_index = image_number - 1;
    
                                if(alarm[0] == -1){
                                    image_index = 0;
                                    alarm[0] = ds_list_find_value(global.img_info[? sprite_index],2);
                                }
                            }
                        }
                        //if it has the situation after bind finish
                        if(ds_map_exists(global.chara_img,opp_name+"_"+opp.chara_data[? "status"]+"_"+chara_name)){
                            if(alarm[0] &lt;= 0 ){
                                with(opp){
                                    image_index = 0;
                                    //image_speed = 0.1;
                                    visible = true;
                                    chara_data[? "visible"] = 1;
                                    ins_name.visible = true;
                                    scr_charadata_broadcast();
                                }
                                scr_chara_reset();
                            }
                        }
                    } else{
                        if(alarm[0] &lt;= 0){
                            cur_level = 0;
                            chara_data[? "img_level"] = 0;
                        }
                    }
                }
            }
            
            
            scr_obj_chara_drawEnd_1_chkst();
            
            
            //if sprite_index has been changed, set image to sprite
            if(ds_list_find_value(global.chara_img[? img_key],cur_level) != undefined){
                img_data = ds_list_find_value(global.chara_img[? img_key],cur_level);
                if(sprite_exists(img_data)){
                    if(img_data != pre_spr){
                        image_index = 0;
                        image_speed = real(chara_data[? "image_speed"]);
                        if(chara_data[? "player_id"] == global.player_id){
                            scr_charadata_broadcast();
                        }
                        sprite_index = img_data;
                        if(cur_level == ds_list_size(global.chara_img[? img_key])-1){
                            if(ds_list_size(global.img_info[? sprite_index]) &gt; 2){
                                alarm[0] = ds_list_find_value(global.img_info[? sprite_index],2);
                            }
                        }
                    }
                }
            }
            
    
        }     
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display bind status
var st = chara_data[? "status"];
if(string_letters(st) == "bind" ){
    var chara_name = chara_data[? "chara_name"];
    var cur_level = real(chara_data[? "img_level"]);
    var opp_name = chara_data[? "opp_name"];
    var img_key = chara_name+"_"+st+"_"+opp_name;
    

    var meter_x1 = ins_name.x;
    var meter_x2 = meter_x1+15;

    for(var i = 0; i &lt;= cur_level; i++){
        draw_rectangle_colour(meter_x1,ins_name.y-20,meter_x2,ins_name.y-30,c_red,c_red,c_red,c_red,false);
        meter_x1 += 20;
        meter_x2 = meter_x1+15;
    }
    
    meter_x1 = ins_name.x;
    meter_x2 = meter_x1+15;        
    for(var i = 0; i &lt; ds_list_size(global.chara_img[? img_key]); i++){
        draw_rectangle_colour(meter_x1,ins_name.y-20,meter_x2,ins_name.y-30,c_black,c_black,c_black,c_black,true);
        meter_x1 += 20;
        meter_x2 = meter_x1+15;
    }
    
    //Display bind speed
    meter_x1 = ins_name.x;
    meter_x2 = meter_x1+5;

    for(var i = 0; i &lt;= (image_speed*10)/0.3; i++){
        draw_rectangle_colour(meter_x1,ins_name.y-40,meter_x2,ins_name.y-50,c_green,c_green,c_green,c_green,false);
        meter_x1 += 7;
        meter_x2 = meter_x1+5;
    }
    
    meter_x1 = ins_name.x;
    meter_x2 = meter_x1+5;        
    for(var i = 0; i &lt; 11; i++){
        draw_rectangle_colour(meter_x1,ins_name.y-40,meter_x2,ins_name.y-50,c_black,c_black,c_black,c_black,true);
        meter_x1 += 7;
        meter_x2 = meter_x1+5;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting mask
draw_self();
p_draw_mask();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
