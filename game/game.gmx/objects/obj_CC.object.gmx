<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_init();
user_name = global.player_name;

if(room == selectroom){

    room_name_list = ds_queue_create();
    if(game_name == "uropoke"){
        ds_queue_enqueue(room_name_list,"room1","room2","room3","room4","room5","room6","room7","room8");
    }
    if(game_name == "oricha"){
        ds_queue_enqueue(room_name_list,"room1","room2","room3","room4","room5","room6","room7","room8");
    }
    var i = 0;
    while(!ds_queue_empty(room_name_list)){
        var tmp_rm_name = ds_queue_dequeue(room_name_list);
        door[i] = instance_create(128+(224*i),384,obj_door);
        door[i].rm_name = tmp_rm_name;
        door[i].rm_title = tmp_rm_name;
        door[i].display_name = tmp_rm_name;
        door[i].sprite_index = spr_room_door;
        i++;
    }
    ds_queue_destroy(room_name_list);

    room_data = ds_map_create();
    user_list[0] = ds_list_create();
    for(var i = 1;i &lt; 9;i++){
        user_list[i] = ds_list_create();
    }
} else{
    port += real(string_digits(rm_name));
}



if(global.server_url != "ws://"+dom_name+":"+string(port)){
    if(ws_status(global.socket) == ws_status_connected){
        ws_disconnect(global.socket);
        global.socket = -1;
    }
    if(global.entry_flag == 1 &amp;&amp; global.connect_flag == 1){
        global.socket = ws_connect("ws://"+dom_name+":"+string(port));
    }

} else{

}
global.server_url = "ws://"+dom_name+":"+string(port);


start_flag = 0;

chat_flag = 0;

ping = -1;
global.zoom = 1;
global.ins_player = -1;
global.chat = -1;

chara_id = "";
left_member = "";
close_flag = 0;
chat_flag = -1;

tmp_chara_data = "";
file_load_list = ds_list_create();
chara_data_list = ds_map_create();

member = ds_map_create();
system_mes = ds_list_create();

expression[0] = -1;
expression[1] = spr_mark_heart;
expression[2] = spr_mark_ase;
expression[3] = spr_mark_fun;
expression[4] = spr_mark_disapp;
expression[5] = spr_mark_question;
expression[6] = spr_mark_angry;
expression[7] = spr_mark_silence;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test room setting (OFFLINE MODE ONLY)
if(room == test_room){
    member[? "test_opp"] = instance_create(500,200,obj_chara);
    var ins_chara = member[? "test_opp"];
    with(ins_chara){
        scr_first_status();
        chara_data[? "player_id"] = "test_opp";
        chara_data[? "chara_name"] = global.opponent_chara_name;
        chara_data[? "base_spr_image"] = global.opponent_chara;
        chara_data[? "user_name"] = global.opponent_chara_name;
        ins_name.myname = global.opponent_chara_name;
        solid = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Extra add
if(game_name == "oricha" &amp;&amp; ( string_letters(room_get_name(room)) == "room" || room == daea_room)){
    var bell = instance_create(700,389,obj_drinkbell);
}

if(game_name == "uropoke" &amp;&amp; room == room5){
    var king = instance_create(960,384,obj_king);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blank</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic control
if(start_flag &gt;= 1 &amp;&amp; global.entry_flag == 1){
    //expressions
    var num_code = string(keyboard_string[string_length(keyboard_string)-1]);
    if(real(num_code) &gt;= 1 &amp;&amp; array_length_1d(expression) &gt; real(num_code)){
        var express = expression[real(num_code)];
        global.ins_player.chara_data[? "express"] = express;
        keyboard_string = "";
    }
    
    //chatting function
    if(keyboard_check_pressed(vk_shift)){
        global.chat = get_string_async("chat","");
        global.ins_player.chara_data[? "chat_status"] = "chat_start";
        keyboard_key_release(vk_left);
        keyboard_key_release(vk_right);
        keyboard_key_release(vk_up);
        keyboard_key_release(vk_shift);
        keyboard_key = -1;       
    }
    if(keyboard_check_pressed(vk_enter)){
        if(global.ins_player.ins_mark.sprite_index == spr_mark_input){
            global.ins_player.chara_data[? "chat_status"] = "chat_end";
            keyboard_key = -1; 
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Control of Player
if(start_flag &gt;= 1 &amp;&amp; global.entry_flag == 1){
    with(member[? global.player_id]){
        var st = chara_data[? "status"];
        if( string_letters(st) != "change" &amp;&amp; st != "eat" &amp;&amp; string_copy(st,1,4) != "bind" &amp;&amp; string_copy(st,1,4) != "atk_"){
        
            if( keyboard_check(vk_left)){
                chara_data[? "movement"] = vk_left;
                if(keyboard_lastkey != vk_left){
                    keyboard_key = vk_left;
                }
        
            } else if(keyboard_check(vk_right)){
                chara_data[? "movement"] = vk_right;
                if(keyboard_lastkey != vk_right){
                    keyboard_key = vk_right;
                }
            }
        
            if(keyboard_check(vk_up)){
                if(rand_flag == 1 ){
                    chara_data[? "movement"] = vk_up;
                    keyboard_key = vk_up;
                }
            }
            
            if(keyboard_check(vk_down)){
                if(ds_map_exists(global.chara_img, global.player_chara_name+"_change")){
                    if(chara_data[? "condition"] == ""){
                        keyboard_key = vk_down;
                        chara_data[? "movement"] = vk_down;
                        chara_data[? "status"] = "change";
                    }
                }
                                
                if(ds_map_exists(global.chara_img, global.player_chara_name+"_bows")){
                    keyboard_key = vk_down;
                    chara_data[? "movement"] = vk_down;
                    chara_data[? "status"] = "bows";
                }
                
                if(ds_map_exists(global.chara_img, global.player_chara_name+"_appeal")){
                    keyboard_key = vk_down;
                    chara_data[? "movement"] = vk_down;
                    chara_data[? "status"] = "appeal";
                }
                
                if(ds_map_exists(global.chara_img, global.player_chara_name+"_eat")){
                    keyboard_key = vk_down;
                    chara_data[? "movement"] = vk_down;
                    chara_data[? "status"] = "eat";
                }
            }
            
            if(keyboard_check_pressed(vk_enter)){
                if(instance_exists(obj_drinkbell)){
                    if(obj_drinkbell.chara == global.ins_player){
                        keyboard_key = vk_enter;
                        chara_data[? "call_flag"] = "1";
                    }
                }
            }
            
                    
            if(keyboard_check_released(vk_up)){
                if(keyboard_lastkey == vk_right || keyboard_lastkey == vk_left){
                    keyboard_key = keyboard_lastkey;
                    chara_data[? "movement"] = keyboard_lastkey;
                    chara_data[? "status"] = "walk";
                } else{
                    keyboard_key = -1;
                    keyboard_lastkey = -1;
                    chara_data[? "movement"] = 0;
                    chara_data[? "status"] = "stand";
                }
            }
            
            if(keyboard_check_released(vk_left) || keyboard_check_released(vk_right)){
                if(keyboard_lastkey == vk_up &amp;&amp; rand_flag == 1){
                    keyboard_key = keyboard_lastkey;
                    chara_data[? "movement"] = keyboard_lastkey;
                    chara_data[? "status"] = "jump";
                } else{
                    keyboard_key = -1;
                    keyboard_lastkey = -1;
                    chara_data[? "movement"] = 0;
                    chara_data[? "status"] = "stand";
                }
            }
            

            
            //runflag
            if( keyboard_check_pressed(ord('R'))){
                if(chara_data[? "move_x"] == "3"){
                    chara_data[? "move_x"] = "6";
                } else if(chara_data[? "move_x"] == "6"){
                    chara_data[? "move_x"] = 3;
                }
            }

            
        
        } //end if chara_data[? "status"] != "bind" &amp;&amp; chara_data[? "status"] != "binded"
    
    } //end with(global.ins_player)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic control of NPC
if(start_flag &gt;= 1 &amp;&amp; global.entry_flag == 1){
    with(obj_chara){
        if(chara_data[? "player_id"] != global.player_id){
            scr_chara_control();
        }
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilization in offline
if(global.entry_flag == 1 &amp;&amp; start_flag &lt; 1){
    //set player data
    global.ins_player = instance_create(30,200,obj_chara);
    member[? global.player_id] = global.ins_player;
    view_object[0] = global.ins_player;

    with(member[? global.player_id]){
        solid = false;
        vspeed = -6;
        scr_first_status();
        chara_data[? "player_id"] = global.player_id;
        chara_data[? "movement"] = keyboard_key;
        chara_data[? "call_flag"] = "0";
        chara_data[? "x"] = 30;
        chara_data[? "y"] = 200;
        chara_data[? "base_spr_image"] = global.player_chara;
        chara_data[? "chara_name"] = global.player_chara_name;
        chara_data[? "user_name"] = global.player_name;
        ins_name.myname = global.player_name;
        sprite_index = global.player_chara;
    }
    keyboard_key = -1;
    if(start_flag == 0){
        start_flag = 1;
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get data via websocket / Init member data
if(ws_status(global.socket) == ws_status_connected){
    if(ws_has_message(global.socket)){
    //Get data via websocket
        var tmp = ws_get_message(global.socket);
        ping = json_decode(tmp);

    //Read room/member data
        if(start_flag &lt; 2 &amp;&amp; ds_map_exists(ping,"init")){

            ds_map_delete(member, global.player_id); //delete temp player info
            global.player_id = ping[? "player_id"];
            global.ins_player.chara_data[? "player_id"] = global.player_id;
            global.ins_player.solid = true;
            member[? global.player_id] = global.ins_player;
            
            //delete header info
            ds_map_delete(ping,"player_id");
            ds_map_delete(ping,"init");
            
            //read chatlog data           
            ds_list_clear(system_mes);
            var chatlog = ping[? "chatlog"];
            ds_map_delete(ping,"chatlog");
            for(var i = ds_list_size(chatlog)-1; i &gt;= 0; i--){
                ds_list_add(system_mes,chatlog[| i]);
            }
            
            //entry user data when connected to the server at first
            var send_data = ds_map_create();
                send_data[? "type"] = "room_entry";
                send_data[? "base_spr_image"] = global.player_chara;
                send_data[? "user_name"] = global.player_name;
                send_data[? "chara_name"] = global.player_chara_name;
            ws_send_message(global.socket,json_encode(send_data));
            
            //create room member instances
            var member_id = ds_map_find_first(ping);
            for(var i = 0; i &lt; ds_map_size(ping); i++){
                var tmp_cha_data = ping[? member_id];
                member[? member_id] = instance_create(floor(tmp_cha_data[? "x"]),floor(tmp_cha_data[? "y"]-6),obj_chara);
                var ins_chara = member[? member_id];
                ins_chara.chara_data = tmp_cha_data;

                ins_chara.visible = tmp_cha_data[? "visible"];
                ins_chara.image_xscale = floor(tmp_cha_data[? "image_xscale"]);
                ins_chara.image_speed = real(tmp_cha_data[? "image_speed"]);
                ins_chara.ins_name.myname = tmp_cha_data[? "user_name"];
                member_id = ds_map_find_next(ping,member_id);
            }
            start_flag = 2;
        }


    //Add new member data
        if(ds_map_exists(ping,"joined")){
            ds_map_delete(ping,"joined");
            
            var member_data = ping;
            member_id = member_data[? "player_id"];
            if(member_id != global.player_id &amp;&amp; member_id != -1){
                var chara_name = member_data[? "chara_name"];
                if(ds_map_exists(global.chara_img,chara_name+"_stand")){
                    var ins_chara = instance_create(30,200,obj_chara);
                    member[? member_id] = ins_chara;
                    ins_chara.chara_data = member_data;
                    ins_chara.ins_name.myname = member_data[? "user_name"];
                    ins_chara.vspeed = -6;
                    
                    var entry_pop = instance_create(0,0 + 50,obj_popup);
                    entry_pop.mes = member_data[? "user_name"]+" joined";
                    entry_pop.text_outline_color = c_aqua;
                    entry_pop.text_color = c_dkgray;
                    entry_pop.window_col = c_yellow;
                    //ds_list_add(system_mes,member_data[? "user_name"]+" has been joined");
                } else{
                //新規キャラ登録が反映されていない場合
                    chara_get = http_post_string("/chara_img_get",chara_name); 
                    tmp_chara_data = member_data;
                }
            }
        }
        

    //update chara status
        if(ping[? "type"] == "update"){
            var npc_id = ping[? "player_id"];
            var npc = member[? npc_id];
            ds_map_delete(ping,"type");
            npc.chara_data = ping;
            npc.x = ping[? "x"];
            npc.y = ping[? "y"];
            npc.image_speed = ping[? "image_speed"];
            npc.visible = ping[? "visible"];
            
            if(npc.chara_data[? "movement"] == "call"){
                //show_message("test")
            }
            //leave function
            if(npc.chara_data[? "status"] == "left"){
                //delete left user data
                if(npc.chara_data[? "type"] == "back_title"){
                    ds_list_delete(user_list[0],ds_list_find_index(npc.user_list[0],npc.chara_data[? "player_id"]));
                    ds_map_delete(room_data[? "selectroom"],npc.chara_data[? "player_id"]);               
                }

                var entry_pop = instance_create(0,0,obj_popup);
                entry_pop.mes = npc.chara_data[? "user_name"]+" left";
                entry_pop.text_outline_color = c_white;
                entry_pop.text_color = c_black;
                entry_pop.window_col = c_navy;
                //ds_list_add(system_mes,npc.chara_data[? "user_name"]+" left");
                
                ds_map_delete(member,npc.chara_data[? "player_id"]);
                
                with(npc){
                    for(var i = 0; i &lt; ds_list_size(ins_opts); i++){
                        with(ds_list_find_value(ins_opts,i)){
                            instance_destroy();
                        }
                    }                    
                    instance_destroy();
                }
            }

        }

    //System messaging function
        if(ping[? "type"] == "sys_message"){
            var mes = ping[? "message"];
        //adjust the line in chat message
            if( string_length(mes) &gt; 60 ){
                mes = string_insert("#",mes,60);
            }
            if( string_length(mes) &gt; 120 ){
                mes = string_insert("#",mes,120);
            }
            
            ds_list_add(system_mes,"---------------System message---------------#"+mes+"#--------------------------------------------");
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bind Motion shift function
with(member[? global.player_id]){
    var st = chara_data[? "status"];
    if(string_letters(st) == "bind"){
        var chara_name = chara_data[? "chara_name"];
        var opp_name = chara_data[? "opp_name"];
        var img_key = chara_name+"_"+st+"_"+opp_name;
        var cur_level = real(chara_data[? "img_level"]);
        if(cur_level &lt; ds_list_size(global.chara_img[? img_key])-1){
            if(keyboard_check_pressed(vk_right) &amp;&amp; ds_list_find_value(global.chara_img[? img_key],cur_level+1) != undefined){
                cur_level += 1;
                chara_data[? "img_level"] = cur_level;
                image_index = 0;
                keyboard_key = -1;

            } else if(keyboard_check_pressed(vk_left) &amp;&amp; cur_level &gt; 0 &amp;&amp; ds_list_find_value(global.chara_img[? img_key],cur_level-1) != undefined){
                cur_level -= 1;
                chara_data[? "img_level"] = cur_level;
                image_index = 0;
                keyboard_key = -1;
            }
        }
        
        if(keyboard_check_pressed(vk_down) &amp;&amp; image_speed &gt; 0.03){
            image_speed -= 0.03; //slowdown
            chara_data[? "image_speed"] = image_speed;
        }
        if(keyboard_check_pressed(vk_up) &amp;&amp; image_speed &lt; 0.3){
            image_speed += 0.03; //speedup
            chara_data[? "image_speed"] = image_speed;
        }
        
        //Quit binding
        if(keyboard_check_pressed(vk_backspace) ){
            var opp_id = chara_data[? "opponent"];
            with(obj_CC.member[? opp_id]){
                scr_chara_reset();
            }
            scr_chara_reset();
        }        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//chat funciton

if(ds_map_find_value(async_load, "id") == global.chat){

    if(ds_map_find_value(async_load, "status")){
    //case YES
        if(ds_map_find_value(async_load, "result") != ""){
            var mes = ds_map_find_value(async_load, "result");
        //adjust length of character in chat message
            if( string_length(mes) &gt; 170){
                mes = string_copy(mes,1,170);
            }
        //adjust the line in chat message
            if( string_length(mes) &gt; 55 ){
                mes = string_insert("#",mes,55);
            }
            if( string_length(mes) &gt; 115 ){
                mes = string_insert("#",mes,115);
            }
        //Send message
          global.ins_player.chara_data[? "chatmes"] = mes;
          with(member[? global.player_id]){
            chara_data[? "chat_status"] = "chatting";
            keyboard_key = -1;
          }
          global.chat = -1;
 
       } else{
            //case empty message
            with(global.ins_player){
                chara_data[? "chat_status"] = "chat_end";
                keyboard_key = -1;
            }
            global.chat = -1;
       }
    } else{
    
        //case NO
        with(global.ins_player){
                chara_data[? "chat_status"] = "chat_end";
                keyboard_key = -1;
        }
        global.chat = -1;

    }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//新規キャラ登録が反映されていない場合のデータ読み込み処理
 if ds_map_find_value(async_load, "id") == chara_get
    {
    if ds_map_find_value(async_load, "status") == 0
       {
       var chara_data = ds_map_find_value(async_load, "result");
       chara_data = json_decode(chara_data);
       var chara_name = ds_map_find_value(chara_data,"charaname");
       ds_map_delete(chara_data,"charaname");
       var motion = ds_map_find_first(chara_data);
       for(var i = 0; i &lt; ds_map_size(chara_data); i++){
            var filename = ds_map_find_first(chara_data[? motion]);
            for(var j = 0; j &lt; ds_map_size(chara_data[? motion]); j++){
                var frame_num = ds_map_find_value(chara_data[? motion],filename); //array
                frame_num = frame_num[| 0];
                
                var spr = sprite_add("http://"+dom_name+img_path+"/chara/"+filename,frame_num,true,false,0,0);

                global.chara_img[? chara_name+"_"+motion] = ds_list_create();
                ds_list_add(global.chara_img[? chara_name+"_"+motion],spr);
                ds_list_add(file_load_list,spr);
                
                global.img_info[? spr] = ds_list_create();
                ds_list_add(global.img_info[? spr],frame_num);
                filename = ds_map_find_next(chara_data[? motion],filename);
            }
            if(motion == "stand"){
                chara_data_list[? spr] = tmp_chara_data;
                
                tmp_chara_data = "";
            }
            motion = ds_map_find_next(chara_data,motion);
       }
       



       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load character images
if(ws_status(global.socket) == ws_status_connected){
    //spr_info: "chara_name",chara_img_type,"filename.png"/"situation",frames,xorigin,yorigin(,repeatflag)]
    //if ds_map_find_value(async_load, "id") == spr
    if(!ds_list_empty(file_load_list)){
        var spr = ds_map_find_value(async_load, "id");
        if(spr != undefined){
            var list_pos = ds_list_find_index(file_load_list,spr);
            if(list_pos &gt; -1){
                if(ds_map_find_value(async_load, "status") &gt;= 0){

                   ds_list_delete(file_load_list, list_pos);
                   //Image set
                   sprite_set_offset(spr,floor((sprite_get_width(spr)/sprite_get_number(spr))/2),sprite_get_height(spr));
                   var base_x = floor(sprite_get_width(spr)/sprite_get_number(spr)/2);
                   sprite_collision_mask(spr, true, 2, base_x-16, base_x+16 , sprite_get_height(spr)-32, sprite_get_height(spr), 3, 0);
                   
                    if(ds_map_exists(chara_data_list,spr)){
                        
                        if(ds_list_empty(file_load_list)){
                            var member_data = chara_data_list[? spr];
                            var member_id = member_data[? "player_id"];
                             var ins_chara = instance_create(30,200,obj_chara);
                             member[? member_id] = ins_chara;
                             ins_chara.chara_data = member_data;
                             ins_chara.ins_name.myname = member_data[? "user_name"];
                             ins_chara.vspeed = -6;
                             ds_list_add(system_mes,member_data[? "user_name"]+" has been joined");                         
                             
    
                             
                             
                             ds_map_delete(chara_data_list,spr);                    
                        }
                    }        
                }
            }
    
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display console
{
if(string_letters(rm_name)=="room"){
    draw_text_outline(rm_name,view_xview[0]+30,0);
}
if(room == test_room){
    draw_text_outline("TEST ROOM",view_xview[0]+30,0);
}
    
  if(start_flag &gt;= 1){
    
    //Display basic keys

        var key_x_c = view_xview[0] + 150;
        var key_y_c = view_hview[0] - 45;
        
        draw_sprite_ext(spr_arrow,0,key_x_c,key_y_c-15,1,1,0,c_white,1); //↑
        draw_sprite_ext(spr_arrow,0,key_x_c,key_y_c+15,1,-1,0,c_white,1); //↓
        draw_sprite_ext(spr_arrow,0,key_x_c-15,key_y_c,1,1,90,c_white,1); //←
        draw_sprite_ext(spr_arrow,0,key_x_c+15,key_y_c,1,1,270,c_white,1); //→
        
        text_color = global.key_config[? "up_col"];
        draw_text_outline(global.key_config[? "up"],key_x_c-floor(string_width(global.key_config[? "up"])/2),key_y_c-40)
        text_color = global.key_config[? "down_col"];
        draw_text_outline(global.key_config[? "down"],key_x_c-floor(string_width(global.key_config[? "down"])/2),key_y_c+25)
        text_color = global.key_config[? "left_col"];
        draw_text_outline(global.key_config[? "left"],key_x_c-25-floor(string_width(global.key_config[? "left"])),key_y_c-10)
        text_color = global.key_config[? "right_col"];
        draw_text_outline(global.key_config[? "right"],key_x_c+25,key_y_c-10);
        
        
        var x_pos = key_x_c+25+string_width(global.key_config[? "right"])+30;
        
    //display expression keys
        var exp_y = view_hview[0] - 4;
        var exp_x = x_pos;
        image_speed = 0.1;
        text_color = c_white;
        for(var i = 1; i &lt; array_length_1d(expression); i++){
            exp_x += 10;
            draw_sprite_ext(spr_blank_key,0,exp_x-1,exp_y-32,1,1,1,c_white,1);
            draw_sprite_ext(expression[i],-1,exp_x,exp_y,1,1,1,c_white,0.8);
            
            draw_text_outline(i,exp_x+4,exp_y-34);
            exp_x += 10;
        }

        
    //Display function keys
        draw_sprite_ext(spr_shift,0,x_pos,view_hview[0]-80,1,1,0,c_white,1); //Shift
        text_color = global.key_config[? "shift_col"];
        draw_text_outline(global.key_config[? "shift"],x_pos+34,view_hview[0]-83);
        
        draw_sprite_ext(spr_blank_key,0,x_pos,view_hview[0]-60,1,1,0,c_white,1); //backspace
        text_color = c_white;
        draw_text_outline("B",x_pos+4,view_hview[0]-62);
        text_color = global.key_config[? "B_col"];
        draw_text_outline(global.key_config[? "B"],x_pos+18,view_hview[0]-62);
        
                
        x_pos = x_pos+18+string_width(global.key_config[? "shift"])+40;
        
        draw_sprite_ext(spr_esc,0,x_pos,view_hview[0]-80,1,1,0,c_white,1); //escape
        text_color = global.key_config[? "escape_col"];
        draw_text_outline(global.key_config[? "escape"],x_pos+18,view_hview[0]-82);

        draw_sprite_ext(spr_backspace,0,x_pos,view_hview[0]-60,1,1,0,c_white,1); //backspace
        text_color = global.key_config[? "backspace_col"];
        draw_text_outline(global.key_config[? "backspace"],x_pos+18,view_hview[0]-62);
        
        
        if(string_width(global.key_config[? "escape"]) &gt; string_width(global.key_config[? "backspace"])){
            x_pos = x_pos+18+string_width(global.key_config[? "escape"])+18;
        }
        if(string_width(global.key_config[? "escape"]) &lt; string_width(global.key_config[? "backspace"])){
            x_pos = x_pos+18+string_width(global.key_config[? "backspace"])+18;
        }     
        
        draw_sprite_ext(spr_enter,0,x_pos,view_hview[0]-80,1,1,0,c_white,1); //escape
        text_color = global.key_config[? "enter_col"];
        draw_text_outline(global.key_config[? "enter"],x_pos+18,view_hview[0]-82);
        
                
        text_color = c_white;
                

              
  }

}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Connection status
  switch (ws_status(global.socket)){
    //Connected
    case ws_status_connected:
      //Ping already established
        text_color = c_aqua;
        var info = "--ONLINE--#EXIT: ESC key / Close the window";
        if(ds_list_size(system_mes) &gt; 10){
            ds_list_delete(system_mes,0);
        }
        draw_set_alpha(0.5);
        draw_rectangle_colour(view_xview[0]+500,24,view_xview[0]+1000,250,c_dkgray,c_dkgray,c_dkgray,c_dkgray,false);
        draw_set_alpha(1);
        var mes = "";
        for(var i = 0; i &lt; ds_list_size(system_mes);i++){
            draw_set_colour(c_silver);
            mes += system_mes[| i]+"#";
            draw_set_colour(c_white);
        }
        draw_text(view_xview[0]+510,34,mes);
        
        //display name outside the window
        with(obj_chara){
            if( chara_data[? "player_id"] != global.player_id){
                if(x &gt; view_xview[0]+1024 ){
                    draw_text_outline(chara_data[? "user_name"]+" &gt;&gt;",view_xview[0]+950-string_length(chara_data[? "user_name"]),y);
                } else if(x &lt; view_xview[0]){
                    draw_text_outline("&lt;&lt; "+chara_data[? "user_name"],view_xview[0]+20+string_length(chara_data[? "user_name"]),y);
                }
            }
        }
    break;
    
    //Connecting
    case ws_status_connecting:
      //Connecting prompt
      var info = "Connecting...";
      
    break;
    
    //Disconnected
    case ws_status_closed: case ws_status_error:
      //Connect prompt
      text_color = c_ltgray;
      if(start_flag &gt;= 1){
        var info = "--OFFLINE--#EXIT: ESC key / Close the window";
      } else{
        var info = "--OFFLINE--";
      }

    break;

  }
  draw_text_outline(info,view_xview[0]+30, 50);
  
  if(global.login_flag == true){
    var usr = "["+global.username+"]";
    text_outline_color = c_black;
    text_color = c_aqua;
  } else if(global.login_flag == false){
    var usr = "["+global.username+"]";
  }

    draw_text_outline(usr,view_xview[0]+30, 30);
    
    text_outline_color = c_black;
    text_color = c_white;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display system version
draw_text_outline(sys_version,floor(view_xview[0]+view_wview[0]-5-string_width(sys_version)),floor(view_hview[0]-string_height(sys_version)));
text_color = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Broadcast updated status data
with(member[? global.player_id]){
    //set key data for async
    if(ws_status(global.socket) == ws_status_connected){
        if(keyboard_key != 0){
            if(keyboard_key != vk_escape){
                chara_data[? "type"] = "update";
            }
            ws_send_message(global.socket,json_encode(chara_data));
            ds_map_delete(chara_data,"type");
        }
    }
    //update player movement
    scr_chara_control();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quit the game function
    //set key data for async
    if(ws_status(global.socket) == ws_status_connected){
        if(keyboard_key != 0){
            if(keyboard_key == vk_escape){
                chara_data[? "type"] = "left_room";
                chara_data[? "status"] = "left";
                if(obj_CC.rm_name == "selectroom"){
                    view_object[0] = 0;
                    view_xview = 0;
                    view_yview = 0;
                    with(obj_CC){
                        start_flag = -1;
                        close_flag = 0;
                        ds_map_clear(member);                    
                    }
                    obj_entry.select_status = 0;
                    
                    global.entry_flag = 0;
                    global.ins_player = -1;
                    global.player_chara = -1;
                    global.player_chara_name = "";
                    global.player_id = -1;
                    global.connect_flag = 0;
                    with(obj_chara){
                        for(var i = 0; i &lt; ds_list_size(ins_opts); i++){
                            with(ds_list_find_value(ins_opts,i)){
                                instance_destroy();
                            }
                        }
                        instance_destroy();
                    }
                    ws_disconnect(global.socket);
                    
                    global.socket = -1;
                    exit;
                } else{
                    global.entry_flag = 1;
                    ws_disconnect(global.socket);
                    
                    global.socket = -1;
                    room_goto(selectroom);
                    keyboard_key_release(vk_escape);
                    exit;
                }
                
            }
        }
    } else{
        if(keyboard_check(vk_escape)){
          global.ins_player = -1;
          global.entry_flag = 0;
          global.player_chara = -1;
          global.player_id = -1;
          game_restart();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
