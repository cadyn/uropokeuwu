<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_init();

user_name = global.player_name;

if(rm_name == "selectroom"){
    rm_no = 0;
    for(var i = 0; i&lt;8; i++){
        door[i] = instance_create(128+(224*i),384,obj_door);
        door[i].rm_name = "room"+string(i+1);
    }
    room_data = ds_map_create();
    user_list[0] = ds_list_create();
    for(var i = 1;i &lt; 9;i++){
        user_list[i] = ds_list_create();
    }
} else{
    port += real(string_digits(rm_name));
}
server_url = "ws://"+dom_name+":"+string(port); //connect to each room server

if(ws_status(global.socket) == ws_status_connected){
    ws_disconnect(global.socket);

    view_object[0] = 0;
    if(rm_name == "selectroom"){
        start_flag = 1;
        obj_entry.entry_flag = 1;
    }
}

global.socket = ws_connect(server_url);
start_flag = 0;


ping = -1;
global.zoom = 1;
global.ins_player = -1;

chara_id = "";
left_member = "";
close_flag = 0;
chat_flag = -1;

member = ds_map_create();
system_mes = ds_list_create();

expression[0] = -1;
expression[1] = spr_mark_heart;
expression[2] = spr_mark_ase;
expression[3] = spr_mark_fun;
expression[4] = spr_mark_disapp;
expression[5] = spr_mark_question;
expression[6] = spr_mark_angry;
expression[7] = spr_mark_silence;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blank</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wss</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listen for ping responses
if (ws_status(global.socket) == ws_status_connected){

    if (ws_has_message(global.socket)) {
        ping = json_decode(ws_get_message(global.socket));
        if(ping[? "type"] == "redis_hgetall"){
            var val = ds_map_write(ping[? "val"]);
            show_message(val);
            var data = ping[? "val"];
            var first = data[? "test1"];
            show_message(first);
        }
        
        
        
        if(ping[? "status"] == "room_data"){
            ds_map_delete(ping, "status");
            var rm_no = real(string_digits(ping[? "room_name"]))-1;
            ds_map_delete(ping, "room_name");
            door[rm_no].member_num = ping[? "member_num"];
            ds_map_delete(ping, "member_num");
            door[rm_no].rm_data = ping;
        }
        
        //read user data from database
        if(ping[? "status"] == "room_status" || ping[? "status"] == "joined" ){
            var status = ping[? "status"];
            ds_map_delete(ping,"status");
            if(status == "room_status"){
                global.player_id = ping[? "player_id"];
                ds_map_delete(ping,"player_id");
                if(string_letters(rm_name) == "room"){
                    var send_data = ds_map_create();
                    send_data[? "status"] = "room_entry";
                    send_data[? "base_spr_image"] = global.player_chara;
                    send_data[? "user_name"] = global.player_name;
                    ws_send_message(global.socket,json_encode(send_data));
                } 
            }
            
            var member_key = ds_map_find_first(ping);
            var tmp_x = 0;
            var tmp_y = 0;
            for(var i = 0; i&lt;ds_map_size(ping); i++){
                if(!ds_map_exists(member,member_key)){
                    var chara_data = ping[? member_key];
                    if(rm_name == "selectroom"){
                        
                        var tmp_rm_name = chara_data[? "room_name"];
                        var rm_no = real(string_digits(tmp_rm_name));
                        if(tmp_rm_name == "selectroom"){
                            rm_no = 0;   
                        }
                        ds_list_add(user_list[rm_no],member_key);
                        ds_map_add_map(room_data[? tmp_rm_name],member_key,chara_data);
                    }
                    if(chara_data[? "room_name"] == rm_name){
                        member[? member_key] = instance_create(floor(chara_data[? "x"]),floor(chara_data[? "y"]-6),obj_chara);
                        if(member_key == global.player_id){
                            //set player data
                            global.ins_player = member[? member_key];
                            view_object[0] = global.ins_player;
                            global.ins_player.vspeed = -6;
                            start_flag = 1;
                        }
                        
                        var ins_chara = member[? member_key];
                        ins_chara.chara_data = chara_data;
                        ins_chara.visible = floor(chara_data[? "visible"]);
                        ins_chara.image_xscale = floor(chara_data[? "image_xscale"]);
                        ins_chara.ins_name.myname = chara_data[? "user_name"];
                        ins_chara.spr_base = sprite_get_name(chara_data[? "base_spr_image"]);
                        
                        if(status == "joined"){
                            ins_chara.vspeed = -6;
                            ds_list_add(system_mes,chara_data[? "user_name"]+" has been joined");
                        }     
                    }
        
                }
                member_key = ds_map_find_next(ping,member_key);
                
            }
        }
        
        if(ping[? "status"] == "chatlog"){
            var chatlog = ping[? "chatlog"];
            for(var i = ds_list_size(chatlog)-1; i &gt;= 0; i--){
                ds_list_add(system_mes,chatlog[| i]);
            }
            close_flag = 1;
        }
        //end read database
            
    
        //Update ping if there is a response

                if(ping[? "status"] == "moving"){
                    //someone moved
                    var moving_id = ping[? "player_id"];
                    var npc = member[? moving_id];
                    ds_map_delete(ping, "status");
                    var update_key = ds_map_find_first(ping);
                    for(var i = 0; i &lt; ds_map_size(ping); i++){
                        npc.chara_data[? update_key] = ping[? update_key];
                        update_key = ds_map_find_next(ping,update_key);
                    }
                    //control NPC movement
                    npc.x = floor(ping[? "x"]);
                    npc.y = floor(ping[? "y"]) - npc.vspeed;
                        
                }
                
                if(ping[? "status"] == "express"){
    
                    var express_id = ping[? "player_id"];
                    var npc = member[? express_id];
                    //control NPC movement
                    with(npc){
                        scr_mark(wss.ping[? "express"]);
                    }
                }
                            
                if(ping[? "status"] == "binding"){
                    //binded chara id
                    var prey_id = ping[? "player_id"];
                    var prey = member[? prey_id];
                    prey.chara_data[? "hp"] = ping[? "hp"]; 
                    //recover from the binding
                    if(prey.chara_data[? "hp"] &gt;= 100){
                        with(prey){
                            pred.reset_flag = 1;
                            reset_flag = 1;
                        }
                    }
                }
                            
                if(ping[? "status"] == "chatting"){
                    var chatter_id = ping[? "player_id"];
                    var chatter = member[? chatter_id];
                    if(chatter_id != global.player_id){
                        chatter.chatmes = ping[? "chatmes"];
                        if(chatter.chatmes != "") ds_list_add(system_mes,ping[? "user_name"]+": "+ping[? "chatmes"]);
                        with(chatter){
                            if(chatmes != "") scr_voice(chatmes);
                            ins_mark.sprite_index = -1;
                        }
                    }
                }
                
                if(ping[? "status"] == "chat_start"){
                    var chatter_id = ping[? "player_id"];
                    var chatter = member[? chatter_id];
                    if ( chatter_id == global.player_id ){
                        with(chatter){
                            msg = get_string("Type chat text", "");
                            keyboard_lastkey = vk_shift;
                            ds_map_clear(update);
                            if(msg == undefined || msg == ""){
                                scr_send_data(id,"chat_end",update);
                            } else{
                                update[? "user_name"] = global.player_name;
                                update[? "chatmes"] = msg;
                                scr_send_data(id,"chatting",update);
                                if(msg != "") scr_voice(msg);
                                if(msg != "") ds_list_add(wss.system_mes,global.player_name+": "+msg);
                            }
                            msg = -1;
                        }
                    } else{
                        with(chatter){
                            ins_mark.sprite_index = spr_mark_input; 
                            chara_data[? "movement"] = ping[? "movement"]; 
                        }
                    }
                }
                
                if(ping[? "status"] == "chat_end"){
                    var chatter_id = ping[? "player_id"];
                    var chatter = member[? chatter_id];
                    chatter.chara_data[? "chara_status"] = "stand";
                    with(chatter){
                        ins_mark.sprite_index = -1;
                    }
                }            
                
                if(ping[? "status"] == "left"){
                    var left_member_id = ping[? "player_id"];
                    var left_member = member[? left_member_id];
                    var left_chara_data = ping;
                    
                    //delete left user data
                    if(left_chara_data[? "room_name"] == "selectroom"){
                        ds_list_delete(user_list[rm_no],ds_list_find_index(user_list[rm_no],left_member_id));
                        ds_map_delete(room_data[? left_chara_data[? "room_name"]],left_member_id);                
                    }
                    ds_list_add(system_mes,left_chara_data[? "user_name"]+" left");
                    if(instance_exists(left_member)){
                        with(left_member){
                            //reset bind data
                            with(opponent){
                                reset_flag = 1;
                            }
                            with(pred){
                                reset_flag = 1;
                            }
                            for(var i = 0; i &lt; ds_list_size(ins_opts); i++){
                                with(ds_list_find_value(ins_opts,i)){
                                    instance_destroy();
                                }
                            }
                            instance_destroy();
                        }
                    }
                    ds_map_delete(member, left_member_id);
                    
                }
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//chat funciton
/*
if(ds_map_find_value(async_load, "id") == msg){

    if(ds_map_find_value(async_load, "status")){
    //case YES
       if(ds_map_find_value(async_load, "result") != ""){
            
          global.ins_player.chara_data[? "chatmes"] = ds_map_find_value(async_load, "result");
          with(global.ins_player){
            ds_map_clear(update);
                update[? "user_name"] = global.player_name;
                update[? "chatmes"] = chara_data[? "chatmes"];
            scr_send_data(id,"chatting",update);
            scr_voice(chara_data[? "chatmes"]);
          }
          msg = -1;
 
       } else{
            with(global.ins_player){
                ds_map_clear(update);
                scr_send_data(id,"chat_end",update);    
            }

       }
    } else{
    
        //case NO
        with(global.ins_player){
            ds_map_clear(update);
            scr_send_data(id,"chat_end",update); 
        }

    }
 }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Paint status
{
if(string_letters(rm_name)=="room"){
    draw_text_outline(rm_name,view_xview[0]+30,0);
}
  switch (ws_status(global.socket)){

    //Connected
    case ws_status_connected:
      //Ping already established
      if (ping != -1) {
        draw_text(view_xview[0]+30, 30, "接続成功。#退出するにはESCキーかウィンドウを閉じてください。");
        if(ds_list_size(system_mes) &gt; 10){
            ds_list_delete(system_mes,0);
        }
        draw_set_alpha(0.5);
        draw_rectangle_colour(view_xview[0]+500,24,view_xview[0]+1000,250,c_dkgray,c_dkgray,c_dkgray,c_dkgray,false);
        draw_set_alpha(1);
        var mes = "";
        for(var i = 0; i &lt; ds_list_size(system_mes);i++){
            draw_set_colour(c_silver);
            mes += system_mes[| i]+"#";
            draw_set_colour(c_white);
        }
        draw_text(view_xview[0]+510,34,mes);
        
        if(keyboard_check_pressed(vk_escape) &amp;&amp; close_flag == 1){
            close_flag = 0;
            with(global.ins_player){   
                keyboard_lastkey = vk_escape;
                ds_map_clear(update);             
                if(room_get_name(room) == "selectroom"){
                    scr_send_data(id,"back_title",update);
                    view_object[0] = 0;
                    global.ins_player = -1;
                    wss.start_flag = 0;
                    obj_entry.entry_flag = 0;
                } else if(string_letters(wss.rm_name) == "room"){
                    wss.close_flag = 2;
                    scr_send_data(id,"left_room",update);
                    room_goto(selectroom);
                } 
            }
            
        }
        
        with(obj_chara){
            if( chara_data[? "player_id"] != global.player_id){
                if(x &gt; view_xview[0]+1024 ){
                    draw_text(view_xview[0]+950-string_length(chara_data[? "user_name"]),y,chara_data[? "user_name"]+" &gt;&gt;");
                } else if(x &lt; view_xview[0]){
                    draw_text(view_xview[0]+20+string_length(chara_data[? "user_name"]),y,"&lt;&lt; "+chara_data[? "user_name"]);
                }
            }
        }
      }
      //Ping not received yet...
      else {
        draw_text(view_xview[0]+30, 30, "Ping: ---");
      }
    break;
    
    //Connecting
    case ws_status_connecting:
      //Connecting prompt
      draw_text(view_xview[0]+30, 30, "Connecting...");
    break;
    
    //Disconnected
    case ws_status_closed: case ws_status_error:
      //Connect prompt
      if(close_flag &lt; 2 ){
        show_message("Error: Disconnected to the room server.#Try enter again");
        game_restart();
      }
      draw_text(view_xview[0]+30, 30, "Disconnected");
    break;

  }
    text_outline_color = c_black;
    text_color = c_white;
    
  if(start_flag == 1){
  

    if(rm_name == "selectroom"){

      draw_text_outline("[移動]カーソルキー [走り切替]Rキー [チャット]Shift [部屋に入る]扉の前でEnterキー [退出]Escキー",view_xview[0]+10,room_height-40 );
    } else{
      draw_text_outline("[Move]Cursor key [R]Toggle Run [Bind_attack]B [Chat]Shift [Exit]Esc",view_xview[0]+10,room_height-40 );    
    }
      var tmp = "Expression : ";
      draw_text_outline(tmp,view_xview[0]+20,room_height-20);
      var exp_y = room_height-4;
      var exp_x = view_xview[0]+20 + string_width(tmp);
      image_speed = 0.1;
      for(var i = 1; i &lt; array_length_1d(expression); i++){
          exp_x += 10;
          draw_sprite_ext(expression[i],-1,exp_x,exp_y,1,1,1,c_white,0.8);
          draw_text_outline(i,exp_x-6,exp_y-16);
          exp_x += 20;
      }

  
    with(obj_chara){
        if(chara_data[? "action_flag"] == 5 || chara_data[? "action_flag"] == 7){
                draw_sprite(spr_push_n,-1,opponent.ins_gauge.x,opponent.ins_gauge.y-20);
        }
        if(pred == -1){
            if(asset_get_index("spr_"+global.ins_player.chara_data[? "chara_name"]+"_bind_"+chara_data[? "chara_name"]) &gt; -1){
                draw_sprite(spr_trimark,-1,x,bbox_top-10);
            }
        }
    }
  }

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ws_status(global.socket) == ws_status_connecting || ws_status(global.socket) == ws_status_connected){
    ws_redis_del(global.socket,"TEST3333");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
