<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0);
text_outline_color = c_black;
text_color = c_white;

keyboard_clear(vk_anykey);

dom_name = url_get_domain();
//server_url = "ws://"+dom_name+":50000"; //test server
server_url = "ws://oricha.ouroporos.net:"+string(51000+(irandom_range(0,5)*10));
socket = ws_connect(server_url);

status = 0;
select_room = 1;
selectroom_data = ds_map_create();
room_data = ds_map_create();
user_list[0] = ds_list_create();
for(var i = 1;i &lt; 9;i++){
    user_list[i] = ds_list_create();
}
room_type = 0;
back_flag = 0;
enter_flag = 0;
total_num = 0;
close_flag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blank</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ws_status(socket) == ws_status_connected){
    
    if(ws_status(socket) == ws_has_message(socket)){
        var ping = json_decode(ws_get_message(socket));
        
        if(ping[? "status"] == "connected"){
            player_id = ping[? "player_id"];
        //update database
            var send_data = ds_map_create();
            send_data[? "status"] = "room_entered";
            send_data[? "user_name"] = global.player_name;
            send_data[? "base_spr_image"] = global.player_chara;
            send_data[? "room_name"] = room_get_name(room);
            ws_send_message(socket,json_encode(send_data));
            status = 1;
        }

        if(ping[? "status"] == "room_status"){

            ds_map_delete(ping,"status");
            var member_id = ds_map_find_first(ping);
            for(var i = 0; i &lt; ds_map_size(ping); i++){
                var chara_data = ping[? member_id];
                var rm_name = chara_data[? "room_name"];
                var rm_no = string_digits(rm_name);
                if(member_id != ""){
                    if(rm_name == "selectroom"){
                        rm_no = 0;   
                    }
                    ds_list_add(user_list[real(rm_no)],member_id);
                }
                ds_map_add_map(room_data[? rm_name],member_id,chara_data);
                member_id = ds_map_find_next(ping,member_id);         
            }

        }
     
        
            if(ping[? "status"] == "joined"){
                ds_map_delete(ping,"status");
                var member_id = ds_map_find_first(ping);
                var chara_data = ping[? member_id];
                var rm_name = chara_data[? "room_name"];
                var rm_no = string_digits(rm_name);
                if(rm_name == "selectroom"){
                    rm_no = 0;   
                }

                ds_list_add(user_list[rm_no],member_id);
                ds_map_add_map(room_data[? rm_name],member_id, chara_data);
                //ds_map_delete(room_data[? "selectroom"],member_id);

            }
            if(ping[? "status"] == "left"){
                var rm_name = ping[? "room_name"];
                var rm_no = string_digits(rm_name);
                if(rm_name == "selectroom"){
                    rm_no = 0;
                }
                var member_id = ping[? "player_id"];
                ds_list_delete(user_list[rm_no],ds_list_find_index(user_list[rm_no],member_id));
                ds_map_delete(room_data[? rm_name],member_id);

            }
            if(ping[? "status"] == "join_denied"){
                show_message("this room is already full");
            }    
        
        
    }
    

        if(keyboard_check_pressed(vk_right)) select_room += 1;
        if(keyboard_check_pressed(vk_left)) select_room -= 1;
        if(select_room &lt; 1) select_room = 1;
        if(select_room &gt; 4) room_type = 4;
        if(select_room &lt; 5) room_type = 0;
        if(select_room &gt; 8) select_room = 8;
        keyboard_clear(vk_anykey);
        
        if(status == 1 &amp;&amp; keyboard_check_pressed(vk_escape)){
            io_clear();
            keyboard_clear(vk_anykey);
            //global.player_name = "";
            player_id = "";
            global.player_chara = -1;
            ws_disconnect_ext(socket,1000,"left_room");
            room_goto_previous();
        }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (ws_status(socket) == ws_status_closed) {
    draw_text_outline("Failed to connect#The server might be in problem now. Try again later##[ESC key] Go back to the title",50,50);
    
    if(keyboard_check_pressed(vk_escape)){
        io_clear();
        keyboard_clear(vk_anykey);
        //global.player_name = "";
        global.player_chara = -1;
        room_goto_previous();
    }
    
} else if(ds_list_size(user_list[0]) == 0){
    draw_text_outline("Connecting...",50,50);
} else{


    room_cap_pos_x[0] = 20;
    room_cap_pos_x[1] = 320;
    room_cap_pos_x[2] = 20;
    room_cap_pos_x[3] = 320;
    
    room_cap_pos_y[0] = 40;
    room_cap_pos_y[1] = 250;
    room_cap_pos_y[2] = 40;
    room_cap_pos_y[3] = 250;
    
    room_capacity[0] = 4;
    room_capacity[1] = 2;
    
    image_speed = 0.2;
    var slroom_users = user_list[0];
    var slusers = ds_list_create();
    var usersinfo = room_data[? "selectroom"];
    for(var i = 0; i&lt;ds_list_size(slroom_users); i++){
        var userinfo = ds_map_find_value(usersinfo,slroom_users[| i]);
        var name = userinfo[? "user_name"];
        var chara_name = sprite_get_name(userinfo[? "base_spr_image"]);
        chara_name = string_replace(chara_name,"spr_","");
        chara_name = string_replace(chara_name,"_stand","");
        chara_name = string_replace(chara_name,string_char_at(chara_name,0),string_upper(string_char_at(chara_name,0)));
        ds_list_add(slusers,name+" -"+chara_name+"-");
    }
    draw_text_outline("Entrance: "+ds_list_write(slusers),20,20);


        for(var i = room_type; i &lt; room_type + 4; i++){
            var rm_name = "room"+string(i+1);
            var room_member_number = 0;
            
            var usersdata = room_data[? rm_name];
            var userls = user_list[i+1];     

            for(var j = 0; j &lt; ds_list_size(userls); j++){
                
                var user_id = userls[| j];
                var user_info = usersdata[? user_id];
                var user_name = user_info[? "user_name"];
                var spr_image = user_info[? "base_spr_image"];
                
                draw_sprite(spr_image,-1,room_cap_pos_x[i%2]+50+(150*(j%2)),room_cap_pos_y[floor(i/2)]+80+(100*floor(j/2)));
                text_color = c_white;
                draw_text_outline(user_name,room_cap_pos_x[i%2]+50-floor(string_width(user_name)/2)+(150*(j%2)),room_cap_pos_y[floor(i/2)]+80+(100*floor(j/2))+floor(sprite_get_height(spr_image)-sprite_get_yoffset(spr_image)));
                room_member_number += 1;
            }
    
            
            if(i+1 == select_room){
                if(ds_list_size(userls) &lt; room_capacity[floor(i/4)] ){
                    var cap_name = string_insert("&gt; ",rm_name,0);
    
                        if(keyboard_check_pressed(vk_enter)){      
                            ws_disconnect_ext(socket,1000,"moved_room");
                            room_goto(asset_get_index("room"+string(select_room)));
                        }
    
                } else{
                    var cap_name = string_insert("X(FULL) ",rm_name,0);
                }
            } else{
                var cap_name = rm_name;
            }
            
            if(select_room == i+1) text_color = c_yellow;
            if(select_room != i+1) text_color = c_white;
            draw_text_outline(cap_name,room_cap_pos_x[i%2],room_cap_pos_y[floor(i/2)]);
            draw_text_outline(room_member_number+" onlines / max "+room_capacity[floor(i/4)]+" : ",room_cap_pos_x[i%2],room_cap_pos_y[floor(i/2)]+20);

        }    


    text_color = c_white;
    //draw_text_outline(global.player_name,10,floor(room_height)-30-floor(sprite_get_height(global.player_chara)));
    //image_speed = 0.2;
    //draw_sprite(global.player_chara,-1,10+floor(sprite_get_width(global.player_chara)/2),floor(room_height)-10-floor(sprite_get_height(global.player_chara)/2));
    var infomes = "[Enter] Enter the room [ESC] choose your character again";
    draw_text_outline(infomes,floor(view_wview[0]/2)-floor(string_width(infomes)/2),floor(view_hview[0])-30);
    var infomes = "rooms for two &gt;&gt;";
    if(room_type == 0) draw_text_outline(infomes,view_wview[0] - 10 - floor(string_width(infomes)),view_hview[0]/2);
    var infomes = "&lt;&lt; rooms for four";
    if(room_type == 4) draw_text_outline(infomes,view_wview[0] - 10 - floor(string_width(infomes)),view_hview[0]/2);

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
